# -*- coding: utf-8 -*-

"""
/***************************************************************************
 EcosystemServiceValuator
                                 A QGIS plugin
 Calculate ecosystem service values for a given area
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-04-02
        copyright            : (C) 2018 by Phil Ribbens/Key-Log Economics
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Phil Ribbens/Key-Log Economics'
__date__ = '2018-04-02'
__copyright__ = '(C) 2018 by Phil Ribbens/Key-Log Economics'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import csv
import processing

from PyQt5.QtCore import (QCoreApplication,
                          QFileInfo
                          )
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFeatureSink,
                       QgsFields,
                       QgsField,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingOutputLayerDefinition,
                       QgsRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterRasterDestination
                       )

from .parser import HTMLTableParser

#https://stackoverflow.com/questions/4060221/how-to-reliably-open-a-file-in-the-same-directory-as-a-python-script
__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))
__nlcd_data_location__ = os.path.join(__location__, "nlcd_data")
__esv_data_location__ = os.path.join(__location__, "esv_data")

class MostInOne(QgsProcessingAlgorithm):
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    INPUT_RASTER = 'INPUT_RASTER'
    #Getting list of all .tif files in the nlcd_data directory
    NLCD_TIFS = []
    for file in os.listdir(__nlcd_data_location__):   #https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python?page=1&tab=votes#tab-top
        if file.endswith(".tif"):
            NLCD_TIFS.append(file)
    MASK_LAYER = 'MASK_LAYER'
    CLIPPED_RASTER = 'CLIPPED_RASTER'
    HTML_OUTPUT_PATH = 'HTML_OUTPUT_PATH'
    INPUT_ESV = 'INPUT_ESV'
    #Getting list of all CSVs in the esv_data directory
    ESV_CSVS = []
    for file in os.listdir(__esv_data_location__):   #https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python?page=1&tab=votes#tab-top
        if file.endswith(".csv"):
            ESV_CSVS.append(file)
    OUTPUT_RASTER_SUMMARY_TABLE = 'OUTPUT_RASTER_SUMMARY_TABLE'
    OUTPUT_RASTER_SUMMARY_TABLE_FILENAME_DEFAULT = 'Output table of raster unique values'
    OUTPUT_ESV_TABLE = 'OUTPUT_ESV_TABLE'
    OUTPUT_ESV_TABLE_FILENAME_DEFAULT = 'Output esv table'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm
        """
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_RASTER,
                self.tr('Input nlcd raster'),
                self.NLCD_TIFS
            )
        )
        # Input vector to be mask for raster
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.MASK_LAYER,
                self.tr('Mask layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_ESV,
                self.tr('Input table of ESV research data'),
                self.ESV_CSVS
            )
        )
        # Add a parameter for the clipped raster layer
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.CLIPPED_RASTER,
                self.tr('Clipped raster layer'),
                ".tif"
            )
        )
        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.HTML_OUTPUT_PATH,
                self.tr('Place to save intermediate html file [optional]')
            )
        )
        # Add a feature sink for the output raster summary data table
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_RASTER_SUMMARY_TABLE,
                self.tr(self.OUTPUT_RASTER_SUMMARY_TABLE_FILENAME_DEFAULT)
            )
        )
        # Add a feature sink for the output esv data table
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_ESV_TABLE,
                self.tr(self.OUTPUT_ESV_TABLE_FILENAME_DEFAULT)
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        log = feedback.setProgressText
        input_nlcd_index = self.parameterAsEnum(parameters, self.INPUT_RASTER, context)
        input_nlcd_file = self.NLCD_TIFS[input_nlcd_index]
        input_nlcd_path = os.path.join(__nlcd_data_location__ , input_nlcd_file)
        input_raster = QgsRasterLayer(input_nlcd_path)
        if not input_raster.isValid():
            log("Layer failed to load.")
        input_vector = self.parameterAsVectorLayer(parameters, self.MASK_LAYER, context)
        clipped_raster_destination = self.parameterAsOutputLayer(parameters, self.CLIPPED_RASTER, context)

        processing.run("gdal:cliprasterbymasklayer", {'INPUT':input_raster, 'MASK':input_vector.source(), 'ALPHA_BAND':False, 'CROP_TO_CUTLINE':True, 'KEEP_RESOLUTION':False, 'DATA_TYPE':0, 'OUTPUT': clipped_raster_destination}, context=context, feedback=feedback)

        html_output_path = self.parameterAsFileOutput(parameters, self.HTML_OUTPUT_PATH, context)

        output_table_fields = QgsFields()
        output_table_fields.append(QgsField("value"))
        output_table_fields.append(QgsField("pixel_count"))
        output_table_fields.append(QgsField("area_m2"))

        #Append input raster filename to end of output table filename
        if isinstance(parameters['OUTPUT_TABLE'], QgsProcessingOutputLayerDefinition):
            dest_name = self.OUTPUT_TABLE_FILENAME_DEFAULT.replace(" ", "_") + "-" + input_raster.name()
            setattr(parameters['OUTPUT_TABLE'], 'destinationName', dest_name)
        elif isinstance(parameters['OUTPUT_TABLE'], str): #for some reason when running this as part of a model parameters['OUTPUT_TABLE'] isn't a QgsProcessingOutputLayerDefinition object, but instead is just a string
            if parameters['OUTPUT_TABLE'][0:7] == "memory:":
                parameters['OUTPUT_TABLE'] = parameters['OUTPUT_TABLE'].replace(" ", "_") + "-" + input_raster.name()

        (raster_summary_sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT_RASTER_SUMMARY_TABLE,
                context,
                output_table_fields)

        result = {self.OUTPUT_RASTER_SUMMARY_TABLE : dest_id}

        clipped_raster = QgsRasterLayer(clipped_raster_destination)
        units_per_pixel_x = clipped_raster.rasterUnitsPerPixelX()
        units_per_pixel_y = clipped_raster.rasterUnitsPerPixelY()
        if units_per_pixel_x != 30 or units_per_pixel_y != 30:
            if round(units_per_pixel_x) == 30 and round(units_per_pixel_y) == 30:
                feedback.pushDebugInfo("Your input raster's pixels weren't exactly 30x30 meters, but were close enough that the program will continue running. Your input raster's pixels were " + str(units_per_pixel_x) + "x" + str(units_per_pixel_y) + ".")
            else:
                feedback.reportError("The input raster should have 30x30 meter pixels. The one you input is " + str(units_per_pixel_x) + "x" + str(units_per_pixel_y) + ".")
                log("")
                return result

        processing.run("native:rasterlayeruniquevaluesreport", {'INPUT':clipped_raster, 'BAND': 1, 'OUTPUT_HTML_FILE': html_output_path}, context=context, feedback=feedback)
        input_html = open(html_output_path, 'r', encoding='latin1')
        input_html_string = input_html.read()

        # instantiate the parser and then parse the table elements into a python list of lists
        # (per https://stackoverflow.com/questions/6325216/parse-html-table-to-python-list/22320207#22320207)
        p = HTMLTableParser()
        p.feed(input_html_string)
        table_as_list_of_lists = p.tables[0]
        # delete the header row
        del table_as_list_of_lists[0]

        #iterate through the list adding a new feature to the feature sink for every row
        # and a new attribute for every data point
        for tr in table_as_list_of_lists:
            new_feature = QgsFeature(output_table_fields)
            for counter, td in enumerate(tr):
                new_feature.setAttribute(counter, td)
            # Add a feature in the sink
            raster_summary_sink.addFeature(new_feature, QgsFeatureSink.FastInsert)






        input_esv_index = self.parameterAsEnum(parameters, self.INPUT_ESV, context)
        input_esv_path = self.ESV_CSVS[input_esv_index]
        input_esv_table = []
        with open(os.path.join(__esv_data_location__ , input_esv_path), newline='') as f:
            reader = csv.reader(f)
            for row in reader:
                input_esv_table.append(row)

        #change column names
        input_esv_table[0][2] = "min"
        input_esv_table[0][3] = "mean"
        input_esv_table[0][4] = "max"

        # Create list of fields (i.e. column names) for the output CSV
        # Start with fields from the raster input csv
        stat_fields = QgsFields()
        # Then append new fields for the min, max, and mean of each unique
        # ecosystem service (i.e. water, recreation, etc)
        unique_eco_services = set([row[1] for row in input_esv_table[1:]])
        for eco_service in unique_eco_services:
            min_field_str = eco_service.lower().replace(" ", "-") + "_" + "min"
            mean_field_str = eco_service.lower().replace(" ", "-") + "_" + "mean"
            max_field_str = eco_service.lower().replace(" ", "-") + "_" + "max"
            stat_fields.append(QgsField(min_field_str))
            stat_fields.append(QgsField(mean_field_str))
            stat_fields.append(QgsField(max_field_str))
        # Then append three more columns for the totals
        stat_fields.append(QgsField("total_min"))
        stat_fields.append(QgsField("total_mean"))
        stat_fields.append(QgsField("total_max"))

        sink_fields = raster_summary_source.fields()
        sink_fields.extend(stat_fields)


        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return result

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Most in one'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Ecosystem service valuator'

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Short description of " + self.name() + " algorithm")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return MostInOne()
