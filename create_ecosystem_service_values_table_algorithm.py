# -*- coding: utf-8 -*-

"""
/***************************************************************************
 EcosystemServiceValuator
                                 A QGIS plugin
 Calculate ecosystem service values for a given area
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-04-02
        copyright            : (C) 2018 by Phil Ribbens/Key-Log Economics
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Phil Ribbens/Key-Log Economics'
__date__ = '2018-04-02'
__copyright__ = '(C) 2018 by Phil Ribbens/Key-Log Economics'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import csv
import os
import sys
import numpy as np
from numpy import copy
import processing

from os.path import splitext

from PyQt5.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsField,
                       QgsFields,
                       QgsFeature,
                       QgsProcessingParameterRasterDestination,
                       QgsRasterFileWriter,
                       QgsProject,
                       QgsProcessingParameterVectorLayer,
                       QgsRasterLayer,
                       QgsProcessingFeatureSource,
                       QgsProcessingOutputLayerDefinition,
                       QgsProcessingParameterEnum
                       )
#https://stackoverflow.com/questions/4060221/how-to-reliably-open-a-file-in-the-same-directory-as-a-python-script
__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))
__esv_data_location__ = os.path.join(__location__, "esv_data")

class CreateEcosystemServiceValuesTableAlgorithm(QgsProcessingAlgorithm):
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    INPUT_RASTER = 'INPUT_RASTER'
    INPUT_RASTER_SUMMARY = 'INPUT_RASTER_SUMMARY'
    INPUT_ESV = 'INPUT_ESV'

    #Getting list of all CSVs in the esv_data directory
    ESV_CSVS = []
    for file in os.listdir(__esv_data_location__):   #https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python?page=1&tab=votes#tab-top
        if file.endswith(".csv"):
            ESV_CSVS.append(file)

    OUTPUT_TABLE = 'OUTPUT_TABLE'
    OUTPUT_TABLE_FILENAME_DEFAULT = 'Output ESV table'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm
        """
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_RASTER_SUMMARY,
                self.tr('Input table of raster unique values'),
                [QgsProcessing.TypeFile]
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_ESV,
                self.tr('Input table of ESV research data'),
                self.ESV_CSVS
            )
        )
        # Add a feature sink for the output data table
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_TABLE,
                self.tr(self.OUTPUT_TABLE_FILENAME_DEFAULT)
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        log = feedback.setProgressText

        raster_summary_source = self.parameterAsSource(parameters, self.INPUT_RASTER_SUMMARY, context)

        input_esv_index = self.parameterAsEnum(parameters, self.INPUT_ESV, context)
        input_esv_path = self.ESV_CSVS[input_esv_index]
        input_esv_table = []
        with open(os.path.join(__esv_data_location__ , input_esv_path), newline='') as f:
            reader = csv.reader(f)
            for row in reader:
                input_esv_table.append(row)

        #change column names
        input_esv_table[0][2] = "min"
        input_esv_table[0][3] = "mean"
        input_esv_table[0][4] = "max"

        # Create list of fields (i.e. column names) for the output CSV
        # Start with fields from the raster input csv
        stat_fields = QgsFields()
        # Then append new fields for the min, max, and mean of each unique
        # ecosystem service (i.e. water, recreation, etc)
        unique_eco_services = set([row[1] for row in input_esv_table[1:]])
        for eco_service in unique_eco_services:
            min_field_str = eco_service.lower().replace(" ", "-") + "_" + "min"
            mean_field_str = eco_service.lower().replace(" ", "-") + "_" + "mean"
            max_field_str = eco_service.lower().replace(" ", "-") + "_" + "max"
            stat_fields.append(QgsField(min_field_str))
            stat_fields.append(QgsField(mean_field_str))
            stat_fields.append(QgsField(max_field_str))
        # Then append three more columns for the totals
        stat_fields.append(QgsField("total_min"))
        stat_fields.append(QgsField("total_mean"))
        stat_fields.append(QgsField("total_max"))

        sink_fields = raster_summary_source.fields()
        sink_fields.extend(stat_fields)

        #Append raster filename (obtained from stuff after first '-' in the input raster unique values table filename) to end of output table filename
        raster_filename = '-'.join(raster_summary_source.sourceName().split('-')[1:])
        if isinstance(parameters['OUTPUT_TABLE'], QgsProcessingOutputLayerDefinition):
            dest_name = self.OUTPUT_TABLE_FILENAME_DEFAULT.replace(" ", "_") + "-" + raster_filename
            setattr(parameters['OUTPUT_TABLE'], 'destinationName', dest_name)

        # Create the feature sink for the output data table, i.e. the place where we're going to start
        # putting our output data. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT_TABLE, context, sink_fields)

        result = {self.OUTPUT_TABLE : dest_id}

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / raster_summary_source.featureCount() if raster_summary_source.featureCount() else 0

        raster_summary_features = raster_summary_source.getFeatures()

        area_units_conversion_factor = 0.0001 #going from meters squared to hectares

        # Fasfdasdaasdfasdfasdf asdf asfasd fasd
        for raster_summary_current, raster_summary_feature in enumerate(raster_summary_features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            nlcd_code = raster_summary_feature.attributes()[0]
            pixel_count = raster_summary_feature.attributes()[1]
            area = raster_summary_feature.attributes()[2]

            new_feature = QgsFeature(sink_fields)
            new_feature.setAttribute(0, nlcd_code)
            new_feature.setAttribute(1, pixel_count)
            new_feature.setAttribute(2, area)

            total_min = 0
            total_mean = 0
            total_max = 0

            for row in input_esv_table:
                if row[0] == nlcd_code:
                    input_es_name = row[1].lower().replace(" ", "-")
                    for field_index in stat_fields.allAttributesList():
                        output_es = stat_fields.field(field_index).name().split("_")
                        output_es_name = output_es[0].lower()
                        output_es_stat = output_es[1].lower()
                        if input_es_name == output_es_name:
                            if output_es_stat == "min":
                                nlcd_es_min = float(row[2].replace(',',''))*float(area)*float(area_units_conversion_factor)
                                new_feature.setAttribute(field_index + 3, nlcd_es_min)
                                total_min = total_min + nlcd_es_min
                            elif output_es_stat == "mean":
                                nlcd_es_mean = float(row[3].replace(',',''))*float(area)*float(area_units_conversion_factor)
                                new_feature.setAttribute(field_index + 3, nlcd_es_mean)
                                total_mean = total_mean + nlcd_es_mean
                            if output_es_stat == "max":
                                nlcd_es_max = float(row[4].replace(',',''))*float(area)*float(area_units_conversion_factor)
                                new_feature.setAttribute(field_index + 3, nlcd_es_max)
                                total_max = total_max + nlcd_es_max
                        elif output_es_name == "total":
                            if output_es_stat == "min":
                                new_feature.setAttribute(field_index + 3, total_min)
                            if output_es_stat == "mean":
                                new_feature.setAttribute(field_index + 3, total_mean)
                            if output_es_stat == "max":
                                new_feature.setAttribute(field_index + 3, total_max)

            # Add a feature in the sink
            sink.addFeature(new_feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(raster_summary_current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return result

    def mapValues(self, numpy_array, dictionary):
        output_array = copy(numpy_array)
        for key, value in dictionary.items():
            output_array[numpy_array==key] = value
        return output_array

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Create ESV table'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Ecosystem service valuator'

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Short description of " + self.name() + " algorithm")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateEcosystemServiceValuesTableAlgorithm()
