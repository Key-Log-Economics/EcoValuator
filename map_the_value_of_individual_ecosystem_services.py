#NEW
# -*- coding: utf-8 -*-

"""
/***************************************************************************
 EcoValuator
                                 A QGIS plugin
 Calculate ecosystem service values for a given area
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-04-02
        copyright            : (C) 2018 by Key-Log Economics
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Key-Log Economics'
__date__ = '2018-04-02'
__copyright__ = '(C) 2018 by Key-Log Economics'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import numpy as np
from numpy import copy
import processing

from os.path import splitext

from PyQt5.QtGui import *
from qgis.utils import *
from PyQt5.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRasterDestination,
                       QgsRasterFileWriter,
                       QgsRasterLayer,
                       QgsProcessingParameterString,
                       QgsProcessingParameterNumber,
                       QgsProcessingOutputLayerDefinition,
                       QgsProcessingParameterEnum,
                       QgsMapLayerStyle,
                       QgsProject,
                       QgsColorRampShader,
                       QgsRasterShader,
                       QgsRasterBandStats,
                       QgsSingleBandPseudoColorRenderer
                      )

from .appinter import (Raster, App)
from .eco_valuator_classes import LULC_dataset



class MapTheValueOfIndividualEcosystemServices(QgsProcessingAlgorithm):
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    INPUT_RASTER = 'INPUT_RASTER'
    INPUT_ESV_TABLE = 'INPUT_ESV_TABLE'
    INPUT_ESV_FIELD = 'INPUT_ESV_FIELD'
    INPUT_ESV_FIELD_OPTIONS = ['aesthetic', 'air quality', 'biodiversity', 'climate regulation', 'cultural, Other', 'erosion control', 'food/nutrition', 'medicinal', 'pollination', 'protection from extreme events', 'raw materials', 'recreation', 'renewable energy', 'soil formation', 'waste assimilation', 'water supply']
    INPUT_ESV_STAT = 'INPUT_ESV_STAT'
    STATS = ['min', 'avg', 'max']
    OUTPUT_RASTER = 'OUTPUT_RASTER'
    OUTPUT_RASTER_FILENAME_DEFAULT = 'Output esv raster'
    
    INPUT_LULC_SOURCE = 'INPUT_LULC_SOURCE'
    LULC_SOURCES = ['NLCD','NALCMS']    #Index 0 for NLCD, Index 1 for NALCMS


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm
        """
        # Add a parameter for the clipped raster layer
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_LULC_SOURCE,
                self.tr('Select land use/land cover data source'),
                self.LULC_SOURCES
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT_RASTER,
                self.tr('Input clipped raster layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_ESV_TABLE,
                self.tr('Input ESV table'),
                [QgsProcessing.TypeFile]
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_ESV_FIELD,
                self.tr('Choose ecosystem service of interest'),
                self.INPUT_ESV_FIELD_OPTIONS
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_ESV_STAT,
                self.tr('Choose ecosystem Service Value Level'),
                self.STATS
            )
        )

        # Add a parameter for the output raster layer
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_RASTER,
                self.tr(self.OUTPUT_RASTER_FILENAME_DEFAULT)
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        log = feedback.setProgressText
        
        input_lulc_source_index = self.parameterAsEnum(parameters, self.INPUT_LULC_SOURCE, context)
        input_lulc_source = self.LULC_SOURCES[input_lulc_source_index]
        input_raster = self.parameterAsRasterLayer(parameters, self.INPUT_RASTER, context)
        input_nodata_value = 255
        input_esv_field_index = self.parameterAsEnum(parameters, self.INPUT_ESV_FIELD, context)
        input_esv_field = self.INPUT_ESV_FIELD_OPTIONS[input_esv_field_index]
        input_esv_stat_index = self.parameterAsEnum(parameters, self.INPUT_ESV_STAT, context)
        input_esv_stat = self.STATS[input_esv_stat_index]

        log(f"ESV chosen: {input_esv_field}")

        #Labeling output layer in legend   
        if isinstance(parameters['OUTPUT_RASTER'], QgsProcessingOutputLayerDefinition):
            if input_esv_field != 'protection from extreme events':         #'protection from exteme events' is too long for legend in step 3 so it is shortened here
                if input_esv_stat == 'min':
                    setattr(parameters['OUTPUT_RASTER'], 'destinationName', f'Minimum Value - {input_esv_field}')
                elif input_esv_stat == 'max':
                    setattr(parameters['OUTPUT_RASTER'], 'destinationName', f'Maximum Value - {input_esv_field}')
                elif input_esv_stat == 'avg':
                    setattr(parameters['OUTPUT_RASTER'], 'destinationName', f'Average Value - {input_esv_field}')
            else:
                if input_esv_stat == 'min':
                    setattr(parameters['OUTPUT_RASTER'], 'destinationName', f'Minimum Value - extreme event protection')
                elif input_esv_stat == 'max':
                    setattr(parameters['OUTPUT_RASTER'], 'destinationName', f'Maximum Value - extreme event protection')
                elif input_esv_stat == 'avg':
                    setattr(parameters['OUTPUT_RASTER'], 'destinationName', f'Average Value - extreme event protection')


        output_raster_destination = self.parameterAsOutputLayer(parameters, self.OUTPUT_RASTER, context)
        result = {self.OUTPUT_RASTER: output_raster_destination}
        input_esv_table = self.parameterAsSource(parameters, self.INPUT_ESV_TABLE, context)


        # Check to make sure the input ESV table has at least 4 columns
        esv_table_length = LULC_dataset.check_esv_table_length(input_esv_table)
        log(f'{esv_table_length[0]}')
        
        input_esv_table_col_names = esv_table_length[1]
        
        
        # Check to make sure the input ESV table appears to have columns with ESV stats
        esv_stats_test = LULC_dataset.check_for_esv_stats(input_esv_table_col_names)
        log(f'{esv_stats_test}')


        # Check output format
        output_format = LULC_dataset.check_output_format(output_raster_destination)
        log(f'{output_format}')


        #check to make sure all land use codes are valid 
                
        #fork for NLCD land cover data
        if input_lulc_source == 'NLCD':
        
#        I don't like the error handling here. Problem stems from LULC_dataset.check_nlcd_codes() function
            nlcd_code_check = LULC_dataset.check_nlcd_codes(input_esv_field, input_esv_table, input_esv_stat, input_nodata_value)
            if type(nlcd_code_check[0]) is dict:
                raster_value_mapping_dict = nlcd_code_check[0]
                nlcd_codes = nlcd_code_check[1]
                log('NLCD Codes are all valid. Check')
            elif type(nlcd_code_check[0]) is str:
                if len(nlcd_code_check) == 1:
                    log(f'{nlcd_code_check}')
                else:
                    log(f'{nlcd_code_check}')

            # Create a new raster whose pixel values are, instead of being NLCD code values, the per-pixel ecosystem service values corresponding to the NLCD codes
            log(self.tr("Reading input NLCD raster into numpy array ..."))
            grid = Raster.to_numpy(input_raster, band=1, dtype='int64')
        
        
            # Check to make sure the input raster is an NLCD raster, i.e. has the right kinds of pixel values
            nlcd_raster_check = LULC_dataset.check_for_nlcd_raster(grid, nlcd_codes, input_nodata_value, raster_value_mapping_dict)
        
            if len(nlcd_raster_check) == 1:
                log(f'{nlcd_raster_check}')
            elif len(nlcd_raster_check) == 2:
                log(f'{nlcd_raster_check[0]}')
                output_array = nlcd_raster_check[1]
            log(self.tr("Values mapped. Check"))
        
            Raster.numpy_to_file(output_array, output_raster_destination, src=str(input_raster.source()))
            
            
        #fork for NALCMS land cover data    
        elif input_lulc_source == 'NALCMS':

            nalcms_code_check = LULC_dataset.check_nalcms_codes(input_esv_field, input_esv_table, input_esv_stat, input_nodata_value)
            if type(nalcms_code_check[0]) is dict:
                raster_value_mapping_dict = nalcms_code_check[0]
                nalcms_codes = nalcms_code_check[1]
                log('NALCMS Codes are all valid. Check')
            elif type(nalcms_code_check[0]) is str:
                if len(nalcms_code_check) == 1:
                    log(f'{nalcms_code_check}')
                else:
                    log(f'{nalcms_code_check}')
            
            
            # Create a new raster whose pixel values are, instead of being NALCMS code values, the per-pixel ecosystem service values corresponding to the NALCMS codes
            log(self.tr("Reading input NALCMS raster into numpy array ..."))
            grid = Raster.to_numpy(input_raster, band=1, dtype='int64')
            
            # Check to make sure the input raster is an NLCD raster, i.e. has the right kinds of pixel values
            nalcms_raster_check = LULC_dataset.check_for_nalcms_raster(grid, nalcms_codes, input_nodata_value, raster_value_mapping_dict)
            
            log(f'NALCMS_RASTER_CHECK: {nalcms_raster_check}')
            
#            if len(nalcms_raster_check) == 1:
#                log(f'{nalcms_raster_check}')
#            elif len(nalcms_raster_check) == 2:
#                log(f'{nalcms_raster_check[0]}')
#                output_array = nalcms_raster_check[1]
#            log(self.tr("Values mapped. Check"))
        
            Raster.numpy_to_file(output_array, output_raster_destination, src=str(input_raster.source()))
            
        
        # Reclassifies 255 value (no data value) to 0 using GDAL: Raster Calculator
        log(self.tr("Reclassifying missing values with Raster Calculator"))
        
        parameters = {'INPUT_A' : output_raster_destination,
                      'BAND_A' : 1,
                      'FORMULA' : '(A != 255) * A',
                      'OUTPUT' : output_raster_destination}
        
        processing.run('gdal:rastercalculator', parameters)
        
        
        #must add raster to iface so that is becomes active layer, then symbolize it in next step
        iface.addRasterLayer(output_raster_destination)
        log("Symbolizing Output")
        
        
        #grabs active layer and data from that layer to compute range of values in compute_range_of_values() function
        layer = iface.activeLayer()
        provider = layer.dataProvider()
        extent = layer.extent()
        
        #Using RasterBandStats to find range of values in raster layer
        range_of_values = LULC_dataset.compute_range_of_values(layer, provider, extent)

        #Uses range_of_values to color output in QGIS by building raster shader object. Most ESVs have unique colors. 
        LULC_dataset.create_color_ramp_and_shade_output(layer, input_esv_field, *range_of_values)   # *range_of_values brings in tuple as list of arguments
                
        
        log(self.tr(f"Adding final raster to map."))
        #need to add result from gdal:rastercalculator to map (doesn't happen automatically)
        
        
        log(self.tr("Done!\n"))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return result


    def flags(self):
        """
        From documentation: Algorithm is not thread safe and cannot be run in a
        background thread, e.g. algorithms which manipulate the current project,
        layer selections, or with external dependencies which are not thread safe.
        """
        return super().flags() | QgsProcessingAlgorithm.FlagNoThreading

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Step 2: Map the value of individual ecosystem services'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'EcoValuator'

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("This algorithm takes as an Input the clipped NLCD raster from Step 1 and an Input ESV Table, which is the output table from Step 1, and creates a new raster for which the value is the corresponding per-pixel value (minimum, mean, or maximum) of the user-chosen ecosystem service. The new raster is then  given a descriptive name and colored according to the ecosystem service chosen. It's values are divided into even quintiles to emphasize breaks in the data. The user can repeat this step for additional levels (min, mean, max) and ecosystem services.\n Input NLCD raster: This should be the output clipped raster from Step 1, an NLCD layer clipped by a region of interest. \n Input ESV table: This should be the output ESV table from Step 1 and should not be altered. \n Ecosystem service of interest: Specify the ecosystem service you want to map. \n Ecosystem Service Value Level: Choose if you want to map minimum, mean, or maximum values from the ESV table. \n Output esv Raster: Specify an output location for your ESV raster. \n See “Help” for more information on value origins and ecosystem service descriptions.")

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def helpUrl(self):
        return "http://www.keylogeconomics.com/ecovaluator.html"

    def createInstance(self):
        return MapTheValueOfIndividualEcosystemServices()